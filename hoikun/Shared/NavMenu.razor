@using Microsoft.AspNetCore.Components.Authorization
@using hoikun.Services
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserStateService UserStateService

<div class="sidebar @StateCssClass">
    <DxTreeView AllowSelectNodes="true" CssClass="app-sidebar">
        <Nodes>
            <DxTreeViewNode NavigateUrl="/" Text="Home" />
            <DxTreeViewNode Text="スケジュール">
                <Nodes>
                    <DxTreeViewNode NavigateUrl="/schedule" Text="全体日程" />
                    @if (UserStateService.Role == "admin")
                    {
                        <DxTreeViewNode NavigateUrl="/createshift" Text="シフト作成" />
                        <DxTreeViewNode NavigateUrl="/schedule_shift" Text="シフト確認" />
                        <DxTreeViewNode NavigateUrl="/schedule_class" Text="クラス日程作成" />
                    }
                    else if (UserStateService.Role == "admin" || UserStateService.Role == "teacher")
                    {
                        <DxTreeViewNode NavigateUrl="/schedule_shift" Text="シフト確認" />
                        <DxTreeViewNode NavigateUrl="/schedule_class" Text="クラス日程作成" />
                    }
                </Nodes>
            </DxTreeViewNode>
            <DxTreeViewNode Text="プロフィール">
                <Nodes>
                    @if(UserStateService.IsLoggedIn)
                    {
                        <DxTreeViewNode NavigateUrl="MicrosoftIdentity/Account/SignOut" Text="ログアウト" />
                    }
                    else
                    {
                        <DxTreeViewNode NavigateUrl="MicrosoftIdentity/Account/SignIn" Text="ログイン" />
                    }
                </Nodes>
            </DxTreeViewNode>
        </Nodes>
    </DxTreeView>
</div>

@code {
    [Parameter] public string? StateCssClass { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && UserStateService.Email == string.Empty)
        {
            UserStateService.Email = user.Claims.FirstOrDefault(c => c.Type == "emails")?.Value ?? string.Empty;
            
            var givenName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty;
            var surname = user.FindFirst(ClaimTypes.Surname)?.Value ?? string.Empty;
            UserStateService.Username = $"{surname}{givenName}".Trim();
            
            var id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            UserStateService.Id = id;
            
            var role = user.Claims.FirstOrDefault(c => c.Type == "jobTitle")?.Value ?? string.Empty;
            UserStateService.Role = role; // 必要に応じてサービスに保存

            var postalCode = user.Claims.FirstOrDefault(c => c.Type == "postalCode")?.Value ?? string.Empty;
            UserStateService.PostalCode = postalCode;

            var state = user.Claims.FirstOrDefault(c => c.Type == "state")?.Value ?? string.Empty;
            UserStateService.State = state;

            var city = user.Claims.FirstOrDefault(c => c.Type == "city")?.Value ?? string.Empty;
            UserStateService.PostalCode = city;

            var street = user.Claims.FirstOrDefault(c => c.Type == "streetAddress")?.Value ?? string.Empty;
            UserStateService.Street = street;

        }
        else
        {
            UserStateService.Email = string.Empty;
            UserStateService.Username = string.Empty;
            UserStateService.Role = string.Empty; // ロールもリセット
            StateHasChanged();
        }
    }

}
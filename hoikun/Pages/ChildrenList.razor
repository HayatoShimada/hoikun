@page "/children"
@inject UserStateService UserStateService
@using hoikun.Services

@using hoikun.Data
@using hoikun.Enums
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbContextChildren
@attribute [Authorize]

<div class="grid-container">
    <DxGrid @ref="Grid"
            Data="@children"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            CustomizeEditModel="Grid_CustomizeEditModel"
            DataItemDeleting="Grid_DataItemDeleting"
            EditMode="GridEditMode.EditRow"
            EditModelSaving="Grid_EditModelSaving"
            EditNewRowPosition="GridEditNewRowPosition.FixedOnTop"
            TextWrapEnabled="false"
            PageSize="20">

        <Columns>
            <DxGridCommandColumn Width="160px" />
            <DxGridDataColumn FieldName="Name" MinWidth="100" />
            <DxGridDataColumn FieldName="Class.Name" MinWidth="100" >
                <CellEditTemplate>
                    @{
                        var childItem = (Children)context.EditModel;
                    }
                    <DxComboBox Data="@classes"
                                NullText="クラスを選んでください..."
                                SearchMode="ListSearchMode.AutoSearch"
                                SearchFilterCondition="ListSearchFilterCondition.Contains"
                                TextFieldName="Name"
                                ValueFieldName="Id"
                                @bind-Value="@childItem.ClassId">
                    </DxComboBox>
                </CellEditTemplate>


            </DxGridDataColumn>

            <DxGridDataColumn FieldName="UserId" MinWidth="100" />
            <DxGridDataColumn FieldName="Birthday" Width="15%" />
            <DxGridDataColumn FieldName="AllergyInfo" Width="15%" />
            <DxGridDataColumn FieldName="Notes" Width="15%" />
        </Columns>
    </DxGrid>
</div>

@code {
    [Parameter]
    public Class? Class { get; set; }

    private List<Class> classes = new();

    private List<Children> children = new();
    IGrid? Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        classes = await dbContextChildren.Classes.ToListAsync();
        if (Class != null)
        {
            children = await dbContextChildren.Childrens.Where(c => c.ClassId == Class.Id).ToListAsync();
        }
        else
        {
            children = await dbContextChildren.Childrens.ToListAsync();
        }
    }

    private async Task UpdateDataAsync()
    {
        if (Class != null)
        {
            children = await dbContextChildren.Childrens.Where(c => c.ClassId == Class.Id).ToListAsync();
        }
        else
        {
            children = await dbContextChildren.Childrens.ToListAsync();
        }
        StateHasChanged(); // UIを更新
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newChild = (Children)e.EditModel;
            newChild.Name = "未設定";
            newChild.ClassId = Class?.Id ?? 1;

        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editableChild = (Children)e.EditModel;

        try
        {
            if (e.IsNew)
            {
                dbContextChildren.Childrens.Add(editableChild);
            }
            else
            {
                var existingChild = await dbContextChildren.Childrens.FindAsync(editableChild.Id);
                if (existingChild != null)
                {
                    dbContextChildren.Entry(existingChild).CurrentValues.SetValues(editableChild);
                }
                else
                {
                    dbContextChildren.Childrens.Attach(editableChild);
                    dbContextChildren.Entry(editableChild).State = EntityState.Modified;
                }
            }

            await dbContextChildren.SaveChangesAsync();
            await UpdateDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        dbContextChildren.Childrens.Remove((Children)e.DataItem);
        await dbContextChildren.SaveChangesAsync();
        await UpdateDataAsync();
    }

}

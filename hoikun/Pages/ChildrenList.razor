@page "/children"
@using hoikun.Services
@using hoikun.Data
@using hoikun.Enums
@using Microsoft.EntityFrameworkCore

@inject UserStateService UserStateService
@inject ApplicationDbContext dbContext
@inject IDbContextService dbContextService
@attribute [Authorize]


<DxGrid @ref="Grid"
        Data="@children"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        CustomizeEditModel="Grid_CustomizeEditModel"
        DataItemDeleting="Grid_DataItemDeleting"
        EditMode="GridEditMode.EditRow"
        EditModelSaving="Grid_EditModelSaving"
        EditNewRowPosition="GridEditNewRowPosition.FixedOnTop"
        TextWrapEnabled="false"
        PageSize="20">

    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Name" MinWidth="100" />
        <DxGridDataColumn FieldName="Class.Name" MinWidth="100">
            <CellEditTemplate>
                @{
                    var childItem = (Children)context.EditModel;
                }
                <DxComboBox Data="@classes"
                            NullText="クラスを選んでください..."
                            SearchMode="ListSearchMode.AutoSearch"
                            SearchFilterCondition="ListSearchFilterCondition.Contains"
                            TextFieldName="Name"
                            ValueFieldName="Id"
                            @bind-Value="@childItem.ClassId">
                </DxComboBox>
            </CellEditTemplate>


        </DxGridDataColumn>

        <DxGridDataColumn FieldName="UserId" MinWidth="100" />
        <DxGridDataColumn FieldName="Birthday" Width="15%" />
        <DxGridDataColumn FieldName="AllergyInfo" Width="15%" />
        <DxGridDataColumn FieldName="Notes" Width="15%" />
    </Columns>
</DxGrid>


@code {
    [Parameter]
    public Class? SelectedClass { get; set; }

    private List<Class> classes = new();

    private List<Children> children = new();
    IGrid? Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        classes = await dbContextService.GetClassesAsync(query => query);
        await UpdateDataAsync();
    }

    private async Task UpdateDataAsync()
    {
        if (SelectedClass != null)
        {
            children = await dbContextService.GetChildrenAsync(query => query.Where(c => c.Id == SelectedClass.Id));
        }
        else
        {
            children = await dbContextService.GetChildrenAsync(query => query);

        }
        StateHasChanged(); // UIを更新
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newChild = (Children)e.EditModel;
            newChild.Name = "未設定";
            newChild.ClassId = SelectedClass?.Id ?? 1;

        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editableChild = (Children)e.EditModel;

        try
        {
            if (e.IsNew)
            {
                await dbContextService.AddChildrenAsync(editableChild);
            }
            else
            {
                await dbContextService.UpdateChildrenAsync(editableChild.Id, editableChild);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        try
        {
            await dbContextService.DeleteChildrenAsync(((Children)e.DataItem).Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

@page "/answer-form"
@inject IDbContextService FormService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@using System.Text.Json

@if (UserId != UserStateService.ModelId)
{
    <p>アクセス権限がありません</p>
    return;
}

<h3>@formModel.Name</h3>
<p>回答者：@UserStateService.Username</p>
<p>回答日：@((formSubmission.SubmittedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")))</p>

@if (ChildrenId != 0)
{
    <p>対象児：@ChildrenId</p>
}
else
{
    <p>対象児：未選択</p>
}

@if (formModel.Description != null)
{
    <p>@((MarkupString)formModel.Description)</p>
}

<DxFormLayout CssClass="w-100 mb-12">
    @foreach (var group in formFields.GroupBy(f => f.Name))
    {
        <DxFormLayoutGroup ColSpanMd="12" Caption="@(string.IsNullOrWhiteSpace(group.Key) ? "その他" : group.Key)">
            @foreach (var field in group)
            {
                var submissionField = formSubmissionFields.FirstOrDefault(f => f.FieldId == field.Id);
                if (submissionField == null) { continue; }

                <DxFormLayoutItem ColSpanMd="12" Caption="@field.Label">
                    @if (field.FieldType == "テキスト")
                    {
                        <DxTextBox @bind-Value="submissionField.StringValue" />
                    }
                    else if (field.FieldType == "長文")
                    {
                        <DxMemo @bind-Value="submissionField.StringValue" Rows="3" />
                    }
                    else if (field.FieldType == "数値")
                    {
                        <DxSpinEdit @bind-Value="submissionField.IntValue" InputMode="Integer" />
                    }
                    else if (field.FieldType == "日付")
                    {
                        <DxDateEdit T="DateTime?" @bind-Value="submissionField.DateValue" />
                    }
                    else if (field.FieldType == "時刻")
                    {
                        <DxDateEdit T="DateTime?" @bind-Value="submissionField.DateValue" TimeSectionVisible="true" />
                    }
                    else if (field.FieldType == "選択形式")
                    {
                        <DxComboBox Data="@field.Options" @bind-Value="submissionField.StringValue" />
                    }
                </DxFormLayoutItem>
            }
        </DxFormLayoutGroup>
    }

    <DxFormLayoutItem ColSpanMd="12">
        <!-- 既存の回答がある場合は「更新」、ない場合は「送信」 -->
        <DxButton CssClass="w-100" RenderStyle="ButtonRenderStyle.Primary"
                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                  Text="@(formSubmission.Id > 0 ? "更新" : "送信")"
                  Click="EventCallback.Factory.Create(this, async () => await SubmitForm())" />
    </DxFormLayoutItem>
</DxFormLayout>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int FormId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ChildrenId { get; set; }

    private FormModel formModel = new();
    private List<FormField> formFields = new();
    private FormSubmission formSubmission = new();
    private List<FormSubmissionField> formSubmissionFields = new();

    public FormAnswer(List<FormSubmissionField> formSubmissionFields)
    {
        this.formSubmissionFields = formSubmissionFields;
    }

    // フォーム種別（例として利用）
    private IEnumerable<string> FormTypes = new List<string> { "毎年", "毎月", "毎週", "毎日", "1回限り", "無制限" };

    protected override async Task OnInitializedAsync()
    {
        var form = await FormService.GetFormByIdAsync(FormId);
        if (form != null)
        {
            formModel = new FormModel
                {
                    Name = form.Name,
                    Description = form.Description,
                    FormType = form.FormType  // 例："1回限り"など
                };

            formFields = form.FormFields.Select(f => new FormField
                {
                    Id = f.Id,
                    Name = f.Name,
                    Label = f.Label,
                    FieldType = f.FieldType,
                    IsRequired = f.IsRequired,
                    Options = f.Options
                }).ToList();

            // 既存の回答があるかチェック（サービス側で実装）
            var modelId = UserStateService.ModelId ?? 0;
            var childrenId = ChildrenId ?? 0;
            var existingSubmission = await FormService.GetSubmissionAsync(FormId, modelId, childrenId);

            if (existingSubmission != null)
            {
                // 回答済みの場合は、既存の回答内容を利用する
                formSubmission = existingSubmission;
                formSubmissionFields = await FormService.GetSubmissionFieldsAsync(existingSubmission.Id) ?? new List<FormSubmissionField>();

            }
            else
            {
                // 未回答の場合は、新規に回答用オブジェクトを生成
                formSubmission = new FormSubmission
                    {
                        FormId = FormId,
                        SubmittedAt = DateTime.UtcNow,
                        UserId = modelId
                    };

                foreach (var field in formFields)
                {
                    formSubmissionFields.Add(new FormSubmissionField
                        {
                            FieldId = field.Id
                        });
                }
            }
        }
    }

    private async Task SubmitForm()
    {
        // 入力チェック（必要に応じて各フィールドの必須チェックを追加）
        if (formSubmissionFields.Any(f => f.StringValue == null && f.IntValue == null && f.DateValue == null)
            || !UserStateService.ModelId.HasValue)
        {
            Console.WriteLine("未入力の項目があります");
            return;
        }

        // 回答済みなら更新、未回答なら新規登録
        formSubmission.SubmittedAt = DateTime.UtcNow;  // 回答日時の更新

        try
        {
            if (formSubmission.Id > 0)
            {
                // 既存回答の更新処理（サービス側に UpdateSubmissionAsync メソッドを用意）
                await FormService.UpdateSubmissionAsync(formSubmission);
            }
            else
            {
                // 新規回答の登録
                await FormService.SubmitFormAsync(formSubmission);
            }

            var submissionId = formSubmission.Id;
            foreach (var field in formSubmissionFields)
            {
                field.SubmissionId = submissionId;
            }

            await FormService.SubmitFormFieldsAsync(formSubmissionFields);
            NavigationManager.NavigateTo("/form-list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"エラー: {ex.Message}");
        }
    }
}

@page "/answer-form/{FormId:int}/{UserId:int}/{ChildrenId:int}"
@inject IDbContextService FormService
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@using System.Text.Json

@if (UserId != UserStateService.ModelId)
{
    <p>アクセス権限がありません</p>
    return;
}

<h3>@formModel.Name</h3>
<p>回答者：@UserStateService.Username</p>
<p>回答日：@((formSubmission.SubmittedAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")))</p>

@if (ChildrenId != 0)
{
    <p>対象児：@ChildrenId</p>
}
else
{
    <p>対象児：未選択</p>
}

@if (formModel.Description != null)
{
    <p>@((MarkupString)formModel.Description)</p>
}

<DxFormLayout CssClass="w-100 mb-12">
    @foreach (var group in formFields.GroupBy(f => f.Name))
    {
        <DxFormLayoutGroup ColSpanMd="12" Caption="@(string.IsNullOrWhiteSpace(group.Key) ? "その他" : group.Key)">
            @foreach (var field in group)
            {
                var submissionField = formSubmissionFields.FirstOrDefault(f => f.FieldId == field.Id);
                if (submissionField == null) continue;

                <DxFormLayoutItem ColSpanMd="12" Caption="@field.Label">
                    @if (field.FieldType == "テキスト")
                    {
                        <DxTextBox @bind-Value="submissionField.StringValue"
                                   @onchange="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                    else if (field.FieldType == "長文")
                    {
                        <DxMemo @bind-Value="submissionField.StringValue" Rows="3"
                                @onchange="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                    else if (field.FieldType == "数値")
                    {
                        <DxSpinEdit @bind-Value="submissionField.IntValue" InputMode="Integer"
                                    @onchange="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                    else if (field.FieldType == "日付")
                    {
                        <DxDateEdit T="DateTime?" @bind-Value="submissionField.DateValue"
                                    DateChanged="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                    else if (field.FieldType == "時刻")
                    {
                        <DxDateEdit T="DateTime?" @bind-Value="submissionField.DateValue"
                                    TimeSectionVisible="true"
                                    DateChanged="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                    else if (field.FieldType == "選択形式")
                    {
                        <DxComboBox Data="@field.Options" @bind-Value="submissionField.StringValue"
                                    @onchange="(e) => OnChangeForm(field.Id, e.Value)" />
                    }
                </DxFormLayoutItem>
            }
        </DxFormLayoutGroup>
    }
    <DxFormLayoutItem ColSpanMd="12">
        <DxButton CssClass="w-100" RenderStyle="ButtonRenderStyle.Primary"
                  RenderStyleMode="ButtonRenderStyleMode.Outline"
                  Text="@(formSubmission.Id > 0 ? "更新" : "送信")"
                  Click="EventCallback.Factory.Create(this, async () => await SubmitForm())" />
    </DxFormLayoutItem>
</DxFormLayout>

@code {
    [Parameter] public int FormId { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public int ChildrenId { get; set; }

    private FormModel formModel = new();
    private List<FormField> formFields = new();
    private FormSubmission formSubmission = new();
    private List<FormSubmissionField> formSubmissionFields = new();

    protected override async Task OnInitializedAsync()
    {
        var form = await FormService.GetFormByIdAsync(FormId);
        if (form != null)
        {
            formModel = new FormModel
                {
                    Name = form.Name,
                    Description = form.Description,
                    FormType = form.FormType
                };

            formFields = form.FormFields.Select(f => new FormField
                {
                    Id = f.Id,
                    Name = f.Name,
                    Label = f.Label,
                    FieldType = f.FieldType,
                    IsRequired = f.IsRequired,
                    Options = f.Options
                }).ToList();

            var existingSubmission = await FormService.GetSubmissionAsync(FormId, UserId, ChildrenId);

            if (existingSubmission != null)
            {
                formSubmission = existingSubmission;
                formSubmissionFields = await FormService.GetSubmissionFieldsAsync(existingSubmission.Id) ?? new List<FormSubmissionField>();
            }
            else
            {
                formSubmission = new FormSubmission
                    {
                        FormId = FormId,
                        SubmittedAt = DateTime.UtcNow,
                        UserId = UserId
                    };

                formSubmissionFields = formFields.Select(field => new FormSubmissionField
                    {
                        FieldId = field.Id,
                        StringValue = "",
                        IntValue = 0,
                        DateValue = null
                    }).ToList();
            }
        }
    }

    private void OnChangeForm(int fieldId, object value)
    {
        var field = formSubmissionFields.FirstOrDefault(f => f.FieldId == fieldId);
        if (field == null) return;

        switch (value)
        {
            case string stringValue:
                field.StringValue = stringValue;
                break;
            case int intValue:
                field.IntValue = intValue;
                break;
            case DateTime dateTimeValue:
                field.DateValue = dateTimeValue;
                break;
            case null:
                Console.WriteLine($"Field {fieldId} received null value");
                break;
            default:
                Console.WriteLine($"Unhandled type for field {fieldId}");
                break;
        }

        StateHasChanged(); // UIの更新を強制
    }

    private async Task SubmitForm()
    {
        if (formSubmissionFields.Any(f => f.StringValue == null && f.IntValue == null && f.DateValue == null)
            || !UserStateService.ModelId.HasValue)
        {
            Console.WriteLine("未入力の項目があります");
            return;
        }

        formSubmission.SubmittedAt = DateTime.UtcNow;

        try
        {
            if (formSubmission.Id > 0)
            {
                await FormService.UpdateSubmissionAsync(formSubmission);
            }
            else
            {
                await FormService.SubmitFormAsync(formSubmission);
                formSubmission.Id = await FormService.GetLastInsertedSubmissionIdAsync();
            }

            foreach (var field in formSubmissionFields)
            {
                field.SubmissionId = formSubmission.Id;
            }

            await FormService.SubmitFormFieldsAsync(formSubmissionFields);
            NavigationManager.NavigateTo("/form-list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"エラー: {ex.Message}");
        }
    }
}

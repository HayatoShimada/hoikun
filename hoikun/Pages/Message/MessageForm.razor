@page "/message-form/{replyToMessageId:int?}"
@inject MessageService MessageService
@inject NavigationManager Navigation
@inject UserStateService UserStateService
@using Microsoft.AspNetCore.Components.Forms
@using hoikun.Services

<h3>@(ReplyToMessageId == null ? "新しいメッセージを作成" : "返信")</h3>

<div class="mb-3">
    <label class="form-label">件名</label>
    <input class="form-control" @bind="message.Subject" />
</div>

<div class="mb-3">
    <label class="form-label">本文</label>
    <textarea class="form-control" rows="4" @bind="message.Body"></textarea>
</div>

@if (ReplyToMessageId == null)
{
    <UserSelection Users="@allUsers"
                   SelectedRecipients="@selectedRecipients"
                   SelectedRecipientsChanged="@(recipients => selectedRecipients = recipients)" />


    <div class="mb-3">
        <label class="form-label">メッセージカテゴリ</label>
        <select class="form-control" @bind="message.MessageCategoryId">
            <option value="">選択してください</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
    </div>

    <h4>オプション</h4>
    <div class="mb-3">
        @foreach (var option in availableOptions)
        {
            <div>
                <label>@option.OptionKey</label>
                <input class="form-control" @bind="messageOptions[option.OptionKey]" />
            </div>
        }
    </div>
}

<h4>画像添付</h4>
<InputFile OnChange="HandleFileUpload" />


<button class="btn btn-primary mt-3" @onclick="SendMessage">送信</button>

@code {
    [Parameter] public int? ReplyToMessageId { get; set; }
    private MessageDto message = new();
    private List<MessageCategoryDto> categories = new();
    private List<MessageCategoryOptionsDto> availableOptions = new();
    private Dictionary<string, string> messageOptions = new();
    private byte[] uploadedPhoto = Array.Empty<byte>();

    private List<User> allUsers = new(); // すべてのユーザー（初期値）
    private HashSet<string> selectedRoleFilters = new(); // 先生 or 親の選択状態を保持
    private HashSet<int> selectedRecipients = new();

    protected override async Task OnInitializedAsync()
    {

        allUsers = await MessageService.GetAllUsersAsync();

        if (ReplyToMessageId != null)
        {
            var originalMessage = await MessageService.GetMessageByIdAsync(ReplyToMessageId.Value);
            message.Subject = "Re: " + originalMessage.Subject;
            message.Body = "\n\n---\n" + originalMessage.Body;
            int? userId = UserStateService.ModelId;

            if (userId.HasValue)
            {
                bool isRead = await MessageService.ReadMessageAsync(originalMessage.Id, userId);

            }
        }
        else
        {
            categories = await MessageService.GetMessageCategoriesAsync();
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            uploadedPhoto = ms.ToArray();
        }
    }

    private async Task SendMessage()
    {
        if (UserStateService.ModelId == null)
        {
            return;
        }

        int senderId = (int)UserStateService.ModelId;
        if (ReplyToMessageId != null)
        {
            await MessageService.SendReplyAsync(senderId, ReplyToMessageId.Value, message.Body);
        }
        else
        {
            int messageId = await MessageService.CreateMessageAsync(senderId, message, selectedRecipients, messageOptions, uploadedPhoto);

            // 送信先ユーザーの LINE ID を取得
            List<User> recipients = await MessageService.GetUsersByIdsAsync(selectedRecipients);
            List<string> lineIds = recipients.Where(u => !string.IsNullOrEmpty(u.LineId)).Select(u => u.LineId).ToList();

            if (lineIds.Any())
            {
                await MessageService.SendLineMessage(lineIds, message.Subject, message.Body);
            }
        }

        Navigation.NavigateTo("/message-list");
    }

    private void ToggleRecipient(int userId, bool? isChecked)
    {
        if (isChecked == true)
        {
            selectedRecipients.Add(userId);
        }
        else
        {
            selectedRecipients.Remove(userId);
        }
    }




}

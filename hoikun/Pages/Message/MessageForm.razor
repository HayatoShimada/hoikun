@page "/message-form/{replyToMessageId:int?}"
@inject MessageService MessageService
@inject NavigationManager Navigation
@inject UserStateService UserStateService
@using Microsoft.AspNetCore.Components.Forms
@using hoikun.Services

<h3>@(ReplyToMessageId == null ? "新しいメッセージを作成" : "返信")</h3>

<div class="mb-3">
    <label class="form-label">件名</label>
    <input class="form-control" @bind="message.Subject" />
</div>

<div class="mb-3">
    <label class="form-label">本文</label>
    <textarea class="form-control" rows="4" @bind="message.Body"></textarea>
</div>

@if (ReplyToMessageId == null)
{
    <UserSelection Users="@allUsers"
    SelectedRecipients="@selectedRecipients"
    SelectedRecipientsChanged="@(recipients => selectedRecipients = recipients)"
    Children="@children"
    Classes="@classes" />


    <label>カテゴリ</label>
    <DxComboBox Data="@options"
    TextFieldName="@nameof(MessageCategory.Name)"
    @bind-Value="messageCategory"
    @onchange="StateHasChanged"
    CssClass="cw-480"
    InputId="cbOverview" />

    @if (messageCategory.Name == "フォーム")
    {
        <div class="mb-3">
            <label class="form-label">フォーム選択：カテゴリがフォームの場合必須</label>
            <select class="form-control" @bind="selectedFormId">
                <option value="">選択してください</option>
                @foreach (var form in forms)
                {
                    <option value="@form.Id">@form.Name</option>
                }
            </select>
        </div>
    }
}

<div class="mb-3">
    <h4>画像添付</h4>
    <InputFile OnChange="HandleFileUpload" />
</div>

<div class="mb-3">
    <DxButton CssClass="cw-480" @onclick="SendMessage">送信</DxButton>

</div>

@code {
    [Parameter] public int? ReplyToMessageId { get; set; }
    private MessageDto message = new();
    private List<MessageCategoryDto> categories = new();
    private List<MessageCategory> options = new();
    private MessageCategory messageCategory = new();
    private Dictionary<string, string> messageOptions = new();
    private byte[] uploadedPhoto = Array.Empty<byte>();

    private List<User> allUsers = new();
    private List<Children> children = new();
    private List<Class> classes = new();
    private List<Form> forms = new();

    private int? selectedFormId;
    private HashSet<int> selectedRecipients = new();

    protected override async Task OnInitializedAsync()
    {
        allUsers = await MessageService.GetAllUsersAsync();
        children = await MessageService.GetAllChildrenAsync();
        classes = await MessageService.GetAllClassAsync();
        forms = await MessageService.GetAllFormsAsync();
        categories = await MessageService.GetMessageCategoriesAsync();
        options = await MessageService.GetMessageOptionsAsync();

        if (ReplyToMessageId != null)
        {
            var originalMessage = await MessageService.GetMessageByIdAsync(ReplyToMessageId.Value);
            message.Subject = "Re: " + originalMessage.Subject;
            message.Body = "\n\n---\n" + originalMessage.Body;

            int? userId = UserStateService.ModelId;
            if (userId.HasValue)
            {
                await MessageService.ReadMessageAsync(originalMessage.Id, userId);
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        using var ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        uploadedPhoto = ms.ToArray();
    }

    private async Task SendMessage()
    {
        if (UserStateService.ModelId == null)
            return;

        int senderId = UserStateService.ModelId.Value;
        message.MessageCategoryId = messageCategory.Id;

        // フォームのリンクを本文に追加
        if (messageCategory.Name == "フォーム")
        {
            string formLink = $"{Navigation.BaseUri}answer-form/{selectedFormId}/{UserStateService.ModelId}/0";
            message.Body += $"\n\nフォームへのリンク:{formLink}";
        }

        if (ReplyToMessageId != null)
        {
            await MessageService.SendReplyAsync(senderId, ReplyToMessageId.Value, message.Body);
        }
        else
        {
            int messageId = await MessageService.CreateMessageAsync(senderId, message, selectedRecipients, messageOptions, uploadedPhoto);

            // 送信先の LINE ID を取得
            List<User> recipients = await MessageService.GetUsersByIdsAsync(selectedRecipients);
            List<string> lineIds = recipients.Where(u => !string.IsNullOrEmpty(u.LineId)).Select(u => u.LineId).ToList();

            if (lineIds.Any())
            {
                await MessageService.SendLineMessage(lineIds, message.Subject, message.Body);
            }
        }

        Navigation.NavigateTo("/message-list");
    }


}

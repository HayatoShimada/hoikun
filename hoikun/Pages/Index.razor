@page "/"
@using hoikun.Data
@using hoikun.Services
@inject AppointmentService AppointmentService

<span>Appointments count: @apptCount</span>
<DxScheduler StartDate="currentDate"
             StartDateChanged="OnStartDateChanged"
             ActiveViewType="activeType"
             ActiveViewTypeChanged="OnActiveViewChanged"
             DataStorage="@DataStorage"
             CssClass="w-100">
    <DxSchedulerDayView DayCount="1" ShowWorkTimeOnly="false"></DxSchedulerDayView>
    <DxSchedulerWeekView></DxSchedulerWeekView>
    <DxSchedulerMonthView CellMinWidth="120"></DxSchedulerMonthView>
</DxScheduler>

@code {
    int apptCount = 0;



    DateTime currentDate = DateTime.Today;



    DateTime startDate = new DateTime();



    DateTime endDate = new DateTime();



    SchedulerViewType activeType = SchedulerViewType.Day;



    DxSchedulerDataStorage DataStorage = new DxSchedulerDataStorage()

        {

            AppointmentMappings = new DxSchedulerAppointmentMappings()

            {

                Id = "AppointmentId",

                Start = "StartDate",

                End = "EndDate",

                Subject = "Caption",

                LabelId = "Label",

                StatusId = "Status"

            },
        };



    List<Appointment> Appointments = new();



    protected override async Task OnInitializedAsync()

    {

        await LoadAppointmentsAsync();

    }



    async Task OnStartDateChanged(DateTime newStartDate)

    {

        currentDate = newStartDate;

        await LoadAppointmentsAsync();

    }



    async Task OnActiveViewChanged(SchedulerViewType newView)

    {

        activeType = newView;

        await LoadAppointmentsAsync();

    }



    async Task LoadAppointmentsAsync()

    {

        switch (activeType)

        {

            case SchedulerViewType.Day:

                startDate = currentDate;

                endDate = currentDate.AddDays(1);

                break;

            case SchedulerViewType.Week:

                startDate = currentDate.StartOfWeek(DayOfWeek.Sunday);

                endDate = startDate.AddDays(7);

                break;

            case SchedulerViewType.Month:

                startDate = currentDate.StartOfMonth();

                endDate = startDate.AddMonths(1);

                break;

        }



        // サービスを使用してデータベースからデータを取得

        Appointments = await AppointmentService.GetAppointmentsAsync(startDate, endDate);



        // 件数を更新

        apptCount = Appointments.Count;



        // DataStorageにバインド

        DataStorage.AppointmentsSource = Appointments; // 修正: DataStorageに直接データを設定

    }
}

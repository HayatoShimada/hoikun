@page "/blog-create"
@using hoikun.Data
@inject IDbContextService DbService
@inject NavigationManager Navigation
@inject UserStateService UserStateService
@inject IJSRuntime JSRuntime

<PageTitle>園だより作成</PageTitle>

@if (newBlog == null)
{
    <p>読み込み中...</p>
}
else
{
    <EditForm Model="newBlog" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">タイトル</label>
            <InputText class="form-control" @bind-Value="newBlog.Title" />
        </div>

        <h5>コンテンツ</h5>
        @foreach (var content in blogContents.OrderBy(c => c.Order))
        {
            <div class="mb-3 border rounded p-3">
                <label class="form-label">種類</label>
                <select class="form-select" @bind="content.ContentType">
                    <option value="html">HTML</option>
                    <option value="image">画像URL</option>
                </select>

                <label class="form-label mt-2">内容</label>
                @if (content.ContentType == "html")
                {
                    <textarea class="form-control" rows="4" @bind="content.ContentData"></textarea>
                }
                else if (content.ContentType == "image")
                {
                    <InputText class="form-control" @bind-Value="content.ContentData" Placeholder="画像のURLを入力" />
                    @if (!string.IsNullOrEmpty(content.ContentData))
                    {
                        <img src="@content.ContentData" class="img-thumbnail mt-2" style="max-height: 200px;" />
                    }
                    <SingleFileUpload OnUploadCompleted="(fileName) => OnImageUploadCompleted(fileName, content)" />
                }

                <label class="form-label mt-2">表示順</label>
                <InputNumber class="form-control" @bind-Value="content.Order" />

                <button type="button" class="btn btn-danger mt-2" @onclick="() => RemoveContent(content)">削除</button>
            </div>
        }

        <button type="button" class="btn btn-secondary me-2" @onclick="AddHtmlContent">HTML追加</button>
        <button type="button" class="btn btn-secondary me-2" @onclick="AddImageContent">画像追加</button>
        <button type="submit" class="btn btn-primary">保存して一覧へ</button>
    </EditForm>
}

@code {
    private Blog newBlog = new Blog { CreatedAt = DateTime.Now };
    private List<BlogContent> blogContents = new();

    private async Task HandleValidSubmit()
    {
        newBlog.AuthorUserId = UserStateService.ModelId.Value;
        newBlog.PublishedAt = DateTime.Now;

        for (int i = 0; i < blogContents.Count; i++)
        {
            blogContents[i].Order = i + 1;
        }

        await DbService.CreateBlogAsync(newBlog, blogContents);
        Navigation.NavigateTo("/blog-list");
    }

    private void AddHtmlContent()
    {
        blogContents.Add(new BlogContent
            {
                ContentType = "html",
                ContentData = string.Empty,
                Order = blogContents.Count + 1
            });
    }

    private void AddImageContent()
    {
        blogContents.Add(new BlogContent
            {
                ContentType = "image",
                ContentData = string.Empty,
                Order = blogContents.Count + 1
            });
    }

    private void RemoveContent(BlogContent content)
    {
        blogContents.Remove(content);
    }

    private void OnImageUploadCompleted(string fileName, BlogContent targetContent)
    {
        var baseUrl = "https://hoikunstorage.blob.core.windows.net/blog-images/"; // TODO: 必要に応じて修正
        targetContent.ContentData = baseUrl + fileName;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("confirmNavigation.enable");
        }
    }

    public void Dispose()
    {
        // ページ遷移時に警告を解除
        JSRuntime.InvokeVoidAsync("confirmNavigation.disable");
    }
}

@page "/BarcodeScan"
@implements IDisposable
@using Microsoft.JSInterop
@using QRCoder



<QRCodeScanner Width="600" ShowOutput="true" LoadingMessage="Loading video stream (please make sure you have a camera enabled)" OutputMessage="No QR code detected." />

<DxGridLayout CssClass="h-100" ColumnSpacing="16px" RowSpacing="16px">
    <Rows>
        <DxGridLayoutRow Areas="header" />
        <DxGridLayoutRow Areas="item01" />
        <DxGridLayoutRow Areas="item02" />
        <DxGridLayoutRow Areas="item03" />
        <DxGridLayoutRow Areas="item04" />
    </Rows>

    <Columns>
        <DxGridLayoutColumn />
    </Columns>

    <Items>
        <DxGridLayoutItem Area="header">
            <Template>
                <h2>勤退バーコードスキャン</h2>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="item01">
            <Template>
                <div id="camera"></div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="item02">
            <Template>
                <div id="my_result">***</div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="item03">
            <Template>
                <div id="my_barcode"></div>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="item04">
            <Template>
                <DxButton Click="StartCapture">スキャン開始</DxButton>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

<div class="mt-3">
    <h4>スキャン結果: @ScannedBarcode</h4>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private DotNetObjectReference<BarcodeScan>? objRef;
    private string? ScannedBarcode;

    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;

    protected override async Task OnInitializedAsync()
    {
        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
    }



    private static void OnQrCodeScan(string code)
    {
        Console.WriteLine($"OnQrCodeScan {code}");
    }

    private bool _isJsInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isJsInitialized)
        {
            _isJsInitialized = true;
            await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
        }
    }



    protected override void OnAfterRender(bool firstRender)
    {

        try
        {
            if (firstRender)
            {
                objRef?.Dispose(); // 既存のオブジェクトを破棄
                objRef = DotNetObjectReference.Create(this);
                Console.WriteLine("DotNetObjectReference created.");
            }
            base.OnAfterRender(firstRender);
        }
        catch (Exception ex)
        {
            Console.WriteLine("OnAfterRender error: " + ex.Message);
        }
    }

    private async Task StartCapture()
    {
        try
        {
            if (objRef != null)
            {
                Console.WriteLine("Starting capture with JS...");
                await JS.InvokeVoidAsync("barcodeScan.startCapture", objRef);
            }
            else
            {
                Console.WriteLine("Error: DotNetObjectReference is null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("StartCapture error: " + ex.Message);
        }
    }

    [JSInvokable]
    public void CodeDetected(string barcode)
    {
        Console.WriteLine($"CodeDetected received: {barcode}");
        ScannedBarcode = barcode;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

@page "/BarcodeScan"
@implements IDisposable
@using Microsoft.JSInterop
@using QRCoder


<QRCodeScanner Width="600" ShowOutput="true" LoadingMessage="Loading video stream (please make sure you have a camera enabled)" OutputMessage="No QR code detected." />

<DxGridLayout CssClass="h-100" ColumnSpacing="16px" RowSpacing="16px">
    <Rows>
        <DxGridLayoutRow Areas="header" />
        <DxGridLayoutRow Areas="item01" />
        <DxGridLayoutRow Areas="item02" />
        <DxGridLayoutRow Areas="item03" />
        <DxGridLayoutRow Areas="item04" />
    </Rows>

    <Columns>
        <DxGridLayoutColumn />
    </Columns>

    <Items>
        <DxGridLayoutItem Area="header">
            <Template>
                <h2>勤退バーコードスキャン</h2>
            </Template>
        </DxGridLayoutItem>

        <DxGridLayoutItem Area="item01">
            <Template>
                <div id="qr-reader" style="width:300px; height:300px;"></div>
                <p>Scanned QR Code: @ScannedBarcode</p>
            </Template>
        </DxGridLayoutItem>

        
    </Items>
</DxGridLayout>

<div class="mt-3">
    <h4>スキャン結果: @ScannedBarcode</h4>
</div>

@code {
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private DotNetObjectReference<BarcodeScan>? objRef;
    private string? ScannedBarcode;


    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ↓ DotNetObjectReference.Create(this) でコンポーネント自身を渡す
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startQrScanner", objRef);
        }

    }

    [JSInvokable]
    public Task OnQrCodeScanned(string data)
    {
        ScannedBarcode = data;
        Console.WriteLine("Received QR Code: " + data);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

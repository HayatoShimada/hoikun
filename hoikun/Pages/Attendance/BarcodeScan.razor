@page "/BarcodeScan"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject IDbContextService dbContextService
@using hoikun.Data

<div class="container mt-4">
    <h2 class="text-center mb-4">QRコードスキャン</h2>

    <div id="qr-reader" class="qr-reader-container"></div>

    <p class="text-center mt-3">読み取ったQRコード: @ScannedBarcode</p>

    <div class="form-group mt-4 text-center">
        <label>リロードまでの秒数:</label>
        <input type="number" min="1" max="30" @bind="ReloadSeconds" class="form-control d-inline-block" style="width: 100px; margin-left: 10px;" />
    </div>

    @if (IsModalVisible)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@DialogTitle</h5>
                    </div>
                    <div class="modal-body">
                        @((MarkupString)DialogMessage)
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string? ScannedBarcode;
    private List<User>? users;
    private string DialogTitle = "";
    private string DialogMessage = "";
    private bool IsModalVisible = false;
    private int ReloadSeconds = 3;
    private bool _scannerStarted = false;
    private DotNetObjectReference<BarcodeScan>? objRef;

    protected override async Task OnInitializedAsync()
    {
        users = await dbContextService.GetUsersAsync(); // 親と職員の両方を対象
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_scannerStarted)
        {
            _scannerStarted = true;
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("startQrScanner", objRef);
        }
    }

    [JSInvokable]
    public async Task OnQrCodeScanned(string data)
    {
        ScannedBarcode = data;
        var matchedUser = users?.FirstOrDefault(u => u.AADB2CUserId == data);

        if (matchedUser == null)
        {
            ShowModal("ユーザー不明", $"該当するユーザーが見つかりません: {data}");
            return;
        }

        if (matchedUser.Role == "parent")
        {
            await HandlePickupScanAsync(matchedUser);
        }
        else
        {
            await HandleTimeCardScanAsync(matchedUser);
        }

        StateHasChanged();
    }

    private async Task HandlePickupScanAsync(User user)
    {
        var today = DateTime.Today;

        var children = await dbContextService.GetChildrenAsync(q =>
            q.Where(c => c.UserId == user.UserId));

        if (children.Count == 0)
        {
            ShowModal("子ども情報なし", $"ユーザー {user.Name} に紐づく園児情報が見つかりません。");
            return;
        }

        List<string> results = new();

        foreach (var child in children)
        {
            // すでに PickupRecord が存在するか確認
            var existingRecords = await dbContextService.GetPickupRecordsAsync(q =>
                q.Where(r => r.ChildrenId == child.Id && r.PickupTime.Date == today));

            if (existingRecords.Any())
            {
                results.Add($"{child.Name}：すでにお迎え済み");
                continue;
            }

            // 現在時刻と予定時刻の差を計算（予定時刻が未設定なら「設定なし」）
            string timingStatus;
            if (child.PickupExpectedTime.HasValue)
            {
                var now = DateTime.Now.TimeOfDay;
                var expected = child.PickupExpectedTime.Value.ToTimeSpan();
                var diff = (now - expected).TotalMinutes;

                if (Math.Abs(diff) <= 5)
                    timingStatus = "時間通り";
                else if (diff > 5)
                    timingStatus = $"{Math.Floor(diff)}分遅れ";
                else
                    timingStatus = $"{Math.Floor(Math.Abs(diff))}分早い";
            }
            else
            {
                timingStatus = "予定時刻未設定";
            }

            var record = new PickupRecord
                {
                    ChildrenId = child.Id,
                    PickupTime = DateTime.Now,
                    CreatedAt = DateTime.Now
                };

            await dbContextService.AddPickupRecordAsync(record);

            results.Add($"{child.Name}：{timingStatus}");
        }

        ShowModal("お迎え記録", $"ユーザー: {user.Name}<br>" + string.Join("<br>", results));
    }


    private async Task HandleTimeCardScanAsync(User matchedUser)
    {
        var today = DateTime.Today;
        string userName = matchedUser?.Name ?? "（該当ユーザーなし）";
        string userInfo = $"ユーザー名: {userName}";
        string clockInTime = "-", clockOutTime = "-";

        if (matchedUser?.Employee != null)
        {
            var employeeId = matchedUser.Employee.EmployeeId;
            var shifts = await dbContextService.GetShiftsAsync(q => q.Where(s => s.EmployeeId == employeeId && s.WorkDate == today));
            bool hasShift = shifts.Any();

            if (hasShift)
            {
                var timeCardsToday = await dbContextService.GetTimeCardAsync(q =>
                    q.Where(tc => tc.EmployeeId == employeeId && tc.WorkDate == today));
                var existingTimeCard = timeCardsToday.FirstOrDefault();

                if (existingTimeCard == null)
                {
                    var newCard = new TimeCard
                        {
                            EmployeeId = employeeId,
                            WorkDate = today,
                            ClockIn = DateTime.Now,
                            CreatedAt = DateTime.Now,
                            UpdatedAt = DateTime.Now
                        };
                    await dbContextService.AddTimeCardAsync(newCard);
                    clockInTime = newCard.ClockIn?.ToString("HH:mm") ?? "-";
                    ShowModal("出勤打刻成功", $"{userInfo}<br>出勤時間: {clockInTime}<br>（TimeCardが新規作成されました）");
                }
                else
                {
                    clockInTime = existingTimeCard.ClockIn?.ToString("HH:mm") ?? "-";
                    clockOutTime = existingTimeCard.ClockOut?.ToString("HH:mm") ?? "-";
                    ShowModal("すでに打刻済み", $"{userInfo}<br>出勤時間: {clockInTime}<br>退勤時間: {clockOutTime}");
                }
            }
            else
            {
                ShowModal("シフト未登録", $"{userInfo}<br>本日のシフトが登録されていません。");
            }
        }
        else
        {
            ShowModal("ユーザー不明", $"{userInfo}<br>QRコードのユーザーが見つかりません。");
        }
    }

    void ShowModal(string title, string message)
    {
        DialogTitle = title;
        DialogMessage = message;
        IsModalVisible = true;

        _ = Task.Run(async () =>
        {
            await Task.Delay(ReloadSeconds * 1000);
            await InvokeAsync(() =>
            {
                IsModalVisible = false;
                JS.InvokeVoidAsync("location.reload");
            });
        });
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
<style>
    .qr-reader-container {
        width: 100%;
        max-width: 640px;
        height: 480px;
        margin: 0 auto;
        border: 2px solid #ccc;
        border-radius: 10px;
        background-color: #000;
    }
</style>


@inject IDbContextService dbContextService
@inject IJSRuntime jsRuntime

<h3>シフトタイプ管理</h3>

<!-- 新規追加フォーム -->
<div class="mb-4">
    <h5>新規シフトタイプ追加</h5>
    <div class="row g-3">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="シフト名" @bind="newShiftType.Name" />
        </div>
        <div class="col-md-3">
            <input type="time" class="form-control" @bind="newShiftType.StartTime" />
        </div>
        <div class="col-md-3">
            <input type="time" class="form-control" @bind="newShiftType.EndTime" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="AddShiftType">追加</button>
        </div>
    </div>
</div>

<!-- シフトタイプ一覧 -->
<div class="table-responsive">
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>シフト名</th>
                <th>開始時間</th>
                <th>終了時間</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var shiftType in shiftTypes)
            {
                <tr>
                    <td>@shiftType.ShiftTypeId</td>
                    <td><input type="text" class="form-control" @bind="shiftType.Name" /></td>
                    <td><input type="time" class="form-control" @bind="shiftType.StartTime" /></td>
                    <td><input type="time" class="form-control" @bind="shiftType.EndTime" /></td>
                    <td class="text-center">
                        <button class="btn btn-success btn-sm me-2" @onclick="() => UpdateShiftType(shiftType)">更新</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(shiftType.ShiftTypeId)">削除</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<ShiftType> shiftTypes = new();
    private ShiftType newShiftType = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadShiftTypes();
    }

    private async Task LoadShiftTypes()
    {
        shiftTypes = await dbContextService.GetShiftTypesAsync();
    }

    private async Task AddShiftType()
    {
        if (string.IsNullOrWhiteSpace(newShiftType.Name)) return;

        await dbContextService.AddShiftTypeAsync(newShiftType);
        await LoadShiftTypes();
        newShiftType = new ShiftType(); // フォームリセット
    }

    private async Task UpdateShiftType(ShiftType shiftType)
    {
        await dbContextService.UpdateShiftTypeAsync(shiftType);
        await LoadShiftTypes();
    }

    private async Task ConfirmDelete(int shiftTypeId)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", "このシフトタイプを削除しますか？"))
        {
            await DeleteShiftType(shiftTypeId);
        }
    }

    private async Task DeleteShiftType(int shiftTypeId)
    {
        await dbContextService.DeleteShiftTypeAsync(shiftTypeId);
        await LoadShiftTypes();
    }
}
